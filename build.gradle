plugins {
	id 'org.springframework.boot' version '2.7.12'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'

	// google-java-format plugin: https://github.com/sherter/google-java-format-gradle-plugin
	// id 'com.github.sherter.google-java-format' version '0.9'

	// jacoco plugin: https://docs.gradle.org/current/userguide/jacoco_plugin.html
	id 'jacoco'
}

group = 'com.spring.practice'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// implementation 'org.springframework.boot:spring-boot-starter-jdbc' // spring-boot-starter-data-jpa 에서 jdbc 를 포함하기 때문에 제거
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'com.h2database:h2' // 실행시에만 필요한 라이브러리이기 때문에 runtimeOnly 로 지정

	compileOnly 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	implementation 'org.modelmapper:modelmapper:3.1.1'

	implementation 'org.apache.commons:commons-io:1.3.2'

	// jjwt library for jwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
    }

		finalizedBy 'jacocoTestCoverageVerification'
}

// jacocoTestCoverageVerification {
// 	// test coverage rule
// 	violationRules {
// 		// rule unit
// 		// 'element' attribute 가 없으면 따로 타겟을 지정하지 않은 것으로, 전체 테스트 파일을 합친 값을 기준으로 하는 규칙이 된다.
// 		rule {
// 			// 'counter' 의 default: 'INSTRUCTION'
// 			// 'value' 의 default: 'COVEREDRATIO'
// 			limit {
// 				minimum = 0.5
// 			}
// 		}

// 		rule {
// 			enabled = true // rule 의 적용여부
// 			element = 'CLASS' // rule 체크 단위 - element: BUNDLE, PACKAGE, CLASS, SOURCEFILE, METHOD
// 			includes = ['org.gradle.*'] // 

// 			limit {
// 				counter = 'LINE' // line 커버리지 - counter: INSTRUCTION, LINE, BRANCH, COMPLEXITY, METHOD and CLASS
// 				value = 'TOTALCOUNT' //  TOTALCOUNT, MISSEDCOUNT, COVEREDCOUNT, MISSEDRATIO and COVEREDRATIO
// 				maximum = 0.3
// 			}
// 		}
// 	}
// }
