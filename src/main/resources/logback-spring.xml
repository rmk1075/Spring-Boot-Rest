<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- include: 다른 logback 설정 파일을 읽어온다. 읽어 온 설정 파일들의 appender 나 property 등을 사용할 수 있다. 여기서 include 한 파일들은 logback 패키지에 기본적으로 존재하는 파일들이다. -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>

    <!-- property: 설정 파일 내부에서 사용할 속성을 정의한다. -->
    <property name="LOG_PATH" value="./resources/logs" />

    <!-- appender: logback 이 logging event 를 발행하도록 위임하는 객체이다. -->
    <!-- RollingFileAppender: FileAppender 를 상속받아서 기본적으로 파일에 로깅하는 Appender 이다. 파일에 로깅을 하다가 특정 조건이 되면 로그를 쌓던 파일을 다음 파일로 변경하는데, 이를 rollover 라고 한다. -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- ${...}: 해당 기호 안의 이름과 동일한 property 의 값을 사용한다. ${LOG_PATH} 는 "./logs" 값을 가진다. -->
        <!-- file: 로그를 남길 파일의 설정한다. -->
        <file>${LOG_PATH}/logback.log</file>
        <!-- encoder: 로그의 형식을 설정한다. -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <!-- rollingPolicy: rollover 정책을 설정한다. TimeBasedRollingPolicy 는 이름대로 시간 조건을 이용해 rollover 를 관리한다. -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- fileNamePattern: rollover 된 파일의 이름 형식을 정의한다. logback.log 가 rollover 되면 해당 형식으로 파일 이름이 변경된다. -->
            <fileNamePattern>${LOG_PATH}/logback.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!-- timeBasedFileNamingAndTriggeringPolicy: TimeBasedRollingPolicy 의 trigger 정책을 설정한다. -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize: 로그 파일의 최대 크기를 설정한다. -->
                <maxFileSize>5MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- maxHistory: 최대로 보관하는 파일의 개수를 설정한다. -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- root: logback 의 레벨을 설정한다. logback 의 레벨은 'TRACE, DEBUG, INFO, WARN, ERROR' 로 구성되어 있다. -->
    <root level="INFO">
        <!-- appender-ref: ref 의 값 (여기서는 FILE) 을 이름으로 가지는 appender 를 사용한다. -->
        <appender-ref ref="FILE" />
    </root>

    <!-- springProfile: 해당 Profile 에서의 로그 생성 전략을 설정한다. -->
    <!-- local profile 의 설정 -->
    <springProfile name="local">
        <include resource="org/springframework/boot/logging/logback/base.xml" />
    </springProfile>

    <!-- dev profile 의 설정 -->
    <springProfile name="dev">
        <property name="LOG_PATH" value="/home/application/logs" />
        
        <root level="DEBUG">
            <appender-ref ref="FILE" />
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <!-- prod profile 의 설정 -->
    <springProfile name="prod">
        <property name="LOG_PATH" value="/home/application/logs" />

        <root level="INFO">
            <appender-ref ref="FILE" />
        </root>
    </springProfile>
</configuration>
